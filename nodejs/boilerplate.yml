---
kind: ConfigMap
metadata:
  name: kube-test-boilerplate
  namespace: default
apiVersion: v1
data:

  setup.sh: |-
    touch /tmp/testlog

    #npm install -g \
    #  request-promise-native@1.0.5 \
    #  superagent@3.6.3 \
    #  supertest@3.0.0 \
    #  --ignore-scripts >> /tmp/testlog

    mocha --watch --reporter=tap --preserve-symlinks $TESTS >> /tmp/testlog 2>&1 &

    tail -f /tmp/testlog

  run.sh: |-
    exec >> /tmp/testlog
    exec 2>&1

    tail -n 3 /tmp/testlog > /tmp/lastresult
    echo ""
    echo "### Checking latest result, at $(date -u --iso-8601='seconds') - tests can be updated using:"
    for F in $(ls $TESTS); do echo "# kubectl cp $F $(hostname):$(pwd)/$F"; done
    # exit non-zero unless result of latest mocha run is positive
    # trigger next run (set periodSeconds in readinessProbe to increase time between checks)
    touch -c $TESTS
    # exit 0 only if no failures
    tail -n 1 /tmp/lastresult | grep "# fail 0" > /dev/null

  quit-on-nonzero-exit.sh: |-
    exec >> /tmp/testlog
    exec 2>&1

    exit 0

  test-something.js: |-
    const expect = require('chai').expect;

    describe("A test", () => {

      it("Runs through mocha", () => {
        console.log('Running', new Date());
        expect(true).to.be.ok;
      });

    });

---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: kube-test-boilerplate
  namespace: default
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        test-target: kube-test
        test-type: readiness
    spec:
      containers:
      - name: testcase
        image: solsson/kube-test-nodejs@sha256:bc9c660a4966564031a33402891cc336aa63f017d73f29d8c4b15c5196a4b177
        workingDir: /test
        env:
        - name: TESTS
          value: "*.js"
        # Test set up
        command:
        - /bin/bash
        - -e
        - /test/setup.sh
        # Test run, again and again
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -e
            - /test/run.sh
        # Test quit on nonzero exit
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -e
            - /test/quit-on-nonzero-exit.sh
        volumeMounts:
        - name: config
          mountPath: /test
      volumes:
      - name: config
        configMap:
          name: kube-test-boilerplate
